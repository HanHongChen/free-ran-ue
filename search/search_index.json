{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"free-ran-ue","text":""},{"location":"#introduction","title":"Introduction","text":"<p>free-ran-ue is an open source project developed by Alonza0314.</p> <p>The primary goal of this project is to create a next-generation RAN/UE simulator for testing the NR-DC (New Radio Dual Connectivity) feature in free5GC.</p> <p>A key technical innovation of free-ran-ue is the implementation of userspace GTP-U, replacing the traditional kernel-space GTP5G. This approach provides greater flexibility and control over GTP packet manipulation, making it easier to manage and customize data plane traffic.</p>"},{"location":"#support-features","title":"Support Features","text":"<ul> <li>Fundamental support for UE registration and PDU session establishment in both control and data planes</li> <li>Advanced feature: Support for NR-DC (New Radio Dual Connectivity), enabling simultaneous data plane connections across two gNBs</li> </ul> <p>For more information on how to use free-ran-ue, please refer to the User Guide.</p>"},{"location":"doc-contributors/","title":"Contributors","text":"<p>Note</p> <p>This is our contributors list. It is welcome for everyone to contribute.</p> <p>Feel free to open PULL REQUEST at free-ran-ue.</p> Avatar Contributor Affiliation Github Account Alonza Tu Committer @ free5GC Alonza0314 Lily Wu SWE @ Google lilywuuuuu Dan Hsieh M.S. @ NYCU Dan"},{"location":"doc-design-document/","title":"Design Document","text":"<p>Note</p> <p>Here will give the details about implementations of free-ran-ue.</p>"},{"location":"doc-design-document/#general-design-architecture","title":"General Design Architecture","text":""},{"location":"doc-design-document/#basic-architecture","title":"Basic Architecture","text":"<p>Both control plane and data plane connections exist among the core network, RAN, and UE.</p>"},{"location":"doc-design-document/#new-radio-dual-connectivity-architecture","title":"New Radio-Dual Connectivity Architecture","text":"<p>For dual connection, there will be addition data plane connections from core network to UE via RAN.</p>"},{"location":"doc-design-document/#detail-documents","title":"Detail Documents","text":"<ol> <li>Userspace GTP-U</li> <li>gNB(RAN)</li> <li>UE</li> <li>Static NR-DC</li> <li>Dynamic NR-DC</li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/","title":"Userspace GTP-U","text":""},{"location":"doc-design-document/01-userspace-gtp-u/#introduction","title":"Introduction","text":"<p>In current open source RAN and UE simulators, the GTP-U function is usually implemented in kernel space. For example, PacketRusher uses the gtp5g kernel module to handle GTP packet forwarding.</p> <p>However, if we want more flexible control over GTP-U, moving it to user space is a better choice. The goal of this project is to test the dynamic NR-DC feature in free5GC. Although moving GTP-U to user space may incur some performance overhead, it offers greater flexibility for development and testing.</p>"},{"location":"doc-design-document/01-userspace-gtp-u/#overview","title":"Overview","text":"<p>Here is an example of the ICMP process, i.e., <code>ping</code>.</p>"},{"location":"doc-design-document/01-userspace-gtp-u/#uplink","title":"Uplink","text":"<pre><code>graph LR\n    UE_Kernel([\"&lt;b&gt;UE Kernel&lt;/b&gt;&lt;br/&gt;ping 8.8.8.8\"])\n    TUN([\"&lt;b&gt;TUN&lt;br/&gt;ueTun0&lt;/b&gt;\"])\n    UE_Sim([\"&lt;b&gt;UE Simulator&lt;/b&gt;\"])\n    RAN_Sim([\"&lt;b&gt;RAN Simulator&lt;/b&gt;\"])\n    UPF([\"&lt;b&gt;UPF&lt;/b&gt;&lt;br/&gt;UDP 2152\"])\n\n    UE_Kernel -.-&gt;|\"ICMP Packet\"| TUN\n    TUN -- \"User Data\" --&gt; UE_Sim\n    UE_Sim -- \"UDP\" --&gt; RAN_Sim\n    RAN_Sim -- \"Encapsulate GTP-U &lt;br/&gt; with TEID\" --&gt; UPF\n\n    %% \u6a23\u5f0f\u7f8e\u5316\n    classDef kernel fill:#e3f2fd,stroke:#1976d2,stroke-width:2px;\n    classDef tun fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n    classDef sim fill:#e8f5e9,stroke:#388e3c,stroke-width:2px;\n    classDef ran fill:#f3e5f5,stroke:#8e24aa,stroke-width:2px;\n    classDef gtpu fill:#fbe9e7,stroke:#d84315,stroke-width:2px;\n    classDef upf fill:#ede7f6,stroke:#5e35b1,stroke-width:2px;\n\n    class UE_Kernel kernel;\n    class TUN tun;\n    class UE_Sim sim;\n    class RAN_Sim ran;\n    class GTPU gtpu;\n    class UPF upf;</code></pre> <ol> <li>Create a TUN device in the UE to serve as a virtual network interface for user traffic.</li> <li>The UE reads packets from the TUN device in user space and sends them to the RAN simulator via UDP.</li> <li>The RAN simulator receives the data from the UE and encapsulates the packets as GTP-U packets with the assigned TEID.</li> <li>The RAN simulator sends the encapsulated GTP-U packets to the UPF over UDP (port 2152).</li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#downlink","title":"Downlink","text":"<pre><code>graph LR\n  UPF([\"&lt;b&gt;UPF&lt;/b&gt;&lt;br/&gt;UDP 2152\"])\n  RAN_Sim([\"&lt;b&gt;RAN Simulator&lt;/b&gt;\"])\n  UE_Sim([\"&lt;b&gt;UE Simulator&lt;/b&gt;\"])\n  TUN([\"&lt;b&gt;TUN&lt;br/&gt;ueTun0&lt;/b&gt;\"])\n  UE_Kernel([\"&lt;b&gt;UE Kernel&lt;/b&gt;&lt;br/&gt;ping reply\"])\n\n  UPF -- \"GTP-U Packet\" --&gt; RAN_Sim\n  RAN_Sim -- \"Decapsulate GTP-U&lt;br/&gt;with TEID\" --&gt; UE_Sim\n  UE_Sim -- \"User Data\" --&gt; TUN\n  TUN -.-&gt;|\"ICMP Reply\"| UE_Kernel\n\n  %% \u6a23\u5f0f\u7f8e\u5316\n  classDef upf fill:#ede7f6,stroke:#5e35b1,stroke-width:2px;\n  classDef ran fill:#e3f2fd,stroke:#1976d2,stroke-width:2px;\n  classDef sim fill:#e8f5e9,stroke:#388e3c,stroke-width:2px;\n  classDef tun fill:#fffde7,stroke:#fbc02d,stroke-width:2px;\n  classDef kernel fill:#f3e5f5,stroke:#8e24aa,stroke-width:2px;\n\n  class UPF upf;\n  class RAN_Sim ran;\n  class UE_Sim sim;\n  class TUN tun;\n  class UE_Kernel kernel;</code></pre> <ol> <li>When the UPF has data to send to the UE, it encapsulates the data into a GTP-U packet and sends it via UDP (port 2152) to the RAN simulator.</li> <li>The RAN simulator receives the GTP-U packet, decapsulates it based on the TEID, and forwards the original IP packet to the corresponding UE.</li> <li>The UE simulator receives the packet in user space and writes the raw packet into the TUN device.</li> <li>The UE kernel processes the packet and generates a response (e.g., ping reply).</li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#implementation","title":"Implementation","text":"<p>To describe the implementation, we will separate the infrastructure into UE and RAN components.</p> <p>Important</p> <p>The connections mentioned here only consider the data plane.</p>"},{"location":"doc-design-document/01-userspace-gtp-u/#at-ue","title":"At UE","text":"<p>After the PDU session establishment procedure, the UE will receive configuration messages, including the UE IP address.</p>"},{"location":"doc-design-document/01-userspace-gtp-u/#bring-up-a-network-device-in-kernel-space","title":"Bring up a network device in kernel space","text":"<p>This network device will act as an entry point for user traffic from kernel space to user space. We use the water library to create and manage TUN devices.</p> <ol> <li> <p>Using the water library to bring up a network device:</p> <pre><code>tunCfg := water.Config{ DeviceType: water.TUN }\ntunCfg.Name = ueTunnelDeviceName\n</code></pre> </li> <li> <p>Set up the device with UE IP:</p> <pre><code>cmds := [][]string{\n  {\"ip\", \"addr\", \"add\", fmt.Sprintf(\"%s/32\", ip), \"dev\", ueTunnelDeviceName},\n  {\"ip\", \"link\", \"set\", \"dev\", ueTunnelDeviceName, \"up\"},\n}\n\nfor _, cmd := range cmds {\n  if err := exec.Command(cmd[0], cmd[1:]...).Run(); err != nil {\n    return nil, fmt.Errorf(\"error bringing up tunnel device: %v\", err)\n  }\n}\n</code></pre> </li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#set-up-packet-forwarding-channels","title":"Set up packet forwarding channels","text":"<p>Here we will set up two channels to transmit packets between the READER and TRANSMITTER.</p> <ol> <li> <p>Uplink (read from tunnel device and send to RAN):</p> <pre><code>u.readFromTun = make(chan []byte)\ngo func() {\n  buffer := make([]byte, 4096)\n  for {\n    n, err := ueTunnelDevice.Read(buffer)\n    if err != nil {\n      return\n    }\n    u.readFromTun &lt;- buffer[:n]\n  }\n}()\n</code></pre> </li> <li> <p>Downlink (receive from RAN and write to tunnel device):</p> <pre><code>u.readFromRan = make(chan []byte)\ngo func() {\n  buffer := make([]byte, 4096)\n  for {\n    n, err := u.ranDataPlaneConn.Read(buffer)\n    if err != nil {\n      if errors.Is(err, net.ErrClosed) {\n        return\n      }\n      return\n    }\n    u.readFromRan &lt;- buffer[:n]\n  }\n}()\n</code></pre> </li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#data-plane-packet-handler-transmit-packets-between-tun-and-ran","title":"Data plane packet handler (transmit packets between TUN and RAN)","text":"<p>Using <code>select</code> statement with for loops to handle bidirectional traffic.</p> <pre><code>for {\n    select {\n    case buffer := &lt;-u.readFromTun:\n        n, err := u.ranDataPlaneConn.Write(buffer)\n        if err != nil {\n            if errors.Is(err, net.ErrClosed) {\n                return\n            }\n        }\n    case buffer := &lt;-u.readFromRan:\n        n, err := u.ueTunnelDevice.Write(buffer)\n        if err != nil {\n          return\n        }\n    }\n}\n</code></pre>"},{"location":"doc-design-document/01-userspace-gtp-u/#at-ran","title":"At RAN","text":"<p>The RAN will maintain a MAP for mapping each TEID to its corresponding UE connection.</p>"},{"location":"doc-design-document/01-userspace-gtp-u/#uplink-ran-receives-packets-from-ue-and-formats-them-as-gtp-packets-for-sending-to-upf","title":"Uplink (RAN receives packets from UE and formats them as GTP packets for sending to UPF)","text":"<ol> <li> <p>RAN continuously reads from the UE connection and formats the packet as a GTP packet:</p> <pre><code>func (g *Gnb) startDataPlaneProcessor() {\n    buffer := make([]byte, 4096)\n    for {\n        n, ueAddress, err := g.ranDataPlaneServer.ReadFromUDP(buffer)\n        if err != nil {\n            continue\n        }\n\n        if string(buffer[:n]) == constant.UE_DATA_PLANE_INITIAL_PACKET {\n            go g.handleUeDataPlaneInitialPacket(ueAddress)\n        } else {\n            go g.handleUeDataPlanePacket(ueAddress, buffer)\n        }\n    }\n}\n</code></pre> </li> <li> <p>RAN formats a GTP header with the corresponding TEID and encapsulates it in front of the original packet. Then this GTP packet will be written to the gtpChannel for later transmission:</p> <pre><code>gtpHeader := make([]byte, 12)\n\ngtpHeader[0] = 0x32\ngtpHeader[1] = 0xff\nbinary.BigEndian.PutUint16(gtpHeader[2:], uint16(len(packet)+4))\ncopy(gtpHeader[4:], teid)\ngtpHeader[8], gtpHeader[9], gtpHeader[10], gtpHeader[11] = 0x00, 0x00, 0x00, 0x00\n\ngtpPacket := append(gtpHeader, packet...)\ngtpChannel &lt;- gtpPacket\n</code></pre> </li> <li> <p>RAN reads GTP packets from gtpChannel and sends them to UPF (N3 Connection):</p> <pre><code>for {\n    select {\n    case &lt;-ctx.Done():\n        return\n    case packet := &lt;-gtpChannel:\n        n, err := n3Conn.Write(packet)\n        if err != nil {\n          return\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#downlink-ran-receives-packets-from-upf-and-removes-their-gtp-header-for-sending-to-ue","title":"Downlink (RAN receives packets from UPF and removes their GTP header for sending to UE)","text":"<ol> <li> <p>Receive the GTP packet from N3 connection and pass the packet to the forward function:</p> <pre><code>for {\n    n, err := n3Conn.Read(buffer)\n    if err != nil {\n        if errors.Is(err, net.ErrClosed) {\n            return\n        }\n    }\n    go forwardPacketToUe(buffer[:n], teidToConn, gnbLogger)\n}\n</code></pre> </li> <li> <p>Parse the GTP packet and forward to the UE by TEID (from MAP):</p> <pre><code>teid, payload, err := parseGtpPacket(gtpPacket)\nif err != nil {\n    return\n}\n\nue, exists := dlTeidToUe.Load(teid)\nif !exists {\n    return\n}\n\nswitch u := ue.(type) {\ncase *RanUe:\n    dataPlaneAddress := u.GetDataPlaneAddress()\n    if dataPlaneAddress == nil {\n        return\n    }\n    n, err := ranDataPlaneServer.WriteToUDP(payload, dataPlaneAddress)\n    if err != nil {\n        return\n    }\ncase *XnUe:\n    dataPlaneAddress := u.GetDataPlaneAddress()\n    if dataPlaneAddress == nil {\n        return\n    }\n    n, err := ranDataPlaneServer.WriteToUDP(payload, dataPlaneAddress)\n    if err != nil {\n        return\n    }\n}\n</code></pre> </li> <li> <p>GTP packet parsing function:</p> <pre><code>func parseGtpPacket(gtpPacket []byte) (string, []byte, error) {\n    basicHeader, headerLength := gtpPacket[:8], 8\n\n    isNextExtensionHeader, isSequenceNumber, isNPDUNumber := false, false, false\n\n    if basicHeader[0]&amp;IS_NEXT_EXTENSION_HEADER != 0 {\n        isNextExtensionHeader = true\n    }\n\n    if basicHeader[0]&amp;IS_SEQUENCE_NUMBER != 0 {\n        isSequenceNumber = true\n    }\n\n    if basicHeader[0]&amp;IS_N_PDU_NUMBER != 0 {\n        isNPDUNumber = true\n    }\n\n    if isNextExtensionHeader || isSequenceNumber || isNPDUNumber {\n        headerLength += 3\n    }\n\n    if !isNextExtensionHeader {\n        return hex.EncodeToString(basicHeader[4:]), gtpPacket[headerLength:], nil\n    }\n\n    for {\n        switch gtpPacket[headerLength] {\n        case NEXT_EXTENSION_HEADER_TYPE_NO_MORE_EXTENSION_HEADERS:\n            headerLength += 1\n            return hex.EncodeToString(basicHeader[4:]), gtpPacket[headerLength:], nil\n        case NEXT_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER:\n            extensionHeaderLength := gtpPacket[headerLength+1]\n            headerLength += 2 + int(extensionHeaderLength)*NEXT_EXTENSION_HEADER_TYPE_PDU_SESSION_CONTAINER_LENGTH\n        default:\n            return \"\", nil, fmt.Errorf(\"unknown GTP extension header type: %d\", gtpPacket[headerLength])\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"doc-design-document/01-userspace-gtp-u/#conclusion","title":"Conclusion","text":"<p>This document presents a comprehensive design for implementing GTP-U functionality in user space, providing greater flexibility for testing and development purposes, particularly for dynamic NR-DC features in free5GC. The implementation separates concerns between UE and RAN components, with clear packet forwarding mechanisms for both uplink and downlink traffic.</p> <p>The key benefits of this approach include:</p> <ul> <li>Enhanced control over GTP-U packet processing</li> <li>Better debugging and monitoring capabilities</li> <li>Easier integration with test frameworks</li> <li>Flexibility in implementing custom GTP-U behaviors</li> </ul> <p>While there may be some performance overhead compared to kernel-space implementations, the gained flexibility makes this approach valuable for research and development scenarios.</p>"},{"location":"doc-design-document/02-gnb/","title":"gNB (RAN)","text":"<p>Note</p> <p>The gNB (gNodeB) is a 5G base station that handles message transfer between the core network and User Equipment (UE). It serves as the radio access network node in 5G networks.</p>"},{"location":"doc-design-document/02-gnb/#architecture-overview","title":"Architecture Overview","text":""},{"location":"doc-design-document/02-gnb/#basic-connections","title":"Basic Connections","text":""},{"location":"doc-design-document/02-gnb/#connections","title":"Connections","text":"<p>The gNB (RAN) establishes four fundamental connections:</p> <ul> <li> <p>To Core Network:</p> <ul> <li>Control Plane: NGAP (Next Generation Application Protocol) with AMF (Access and Mobility Management Function)</li> <li>Data Plane: GTP-U (GPRS Tunneling Protocol - User Plane) with UPF (User Plane Function)</li> </ul> </li> <li> <p>To UE (User Equipment):</p> <ul> <li>Control Plane: NAS (Non-Access Stratum) signaling with UE</li> <li>Data Plane: Raw packet transmission with UE over the radio interface</li> </ul> </li> </ul>"},{"location":"doc-design-document/02-gnb/#procedures","title":"Procedures","text":"<ol> <li> <p>NG Setup with AMF (port: <code>38412</code>)</p> <ul> <li>The gNB establishes a connection with the AMF to set up basic operational parameters and register itself with the core network.</li> <li>This procedure includes exchanging supported features, served PLMNs (Public Land Mobile Networks), and TAC (Tracking Area Code) information.</li> </ul> </li> <li> <p>GTP Tunnel Establishment with UPF (port: <code>2152</code>)</p> <ul> <li>The gNB establishes GTP-U tunnels with the UPF for user data forwarding.</li> <li>These tunnels are identified by TEID (Tunnel Endpoint Identifier) values for proper packet routing.</li> </ul> </li> <li> <p>UE Connection Management</p> <p>Upon receiving a new UE control plane connection, the gNB initiates the following procedures:</p> <ul> <li>UE Registration: Authenticates and registers the UE with the network</li> <li>PDU Session Establishment: Creates data sessions for the UE's communication needs</li> </ul> </li> </ol>"},{"location":"doc-design-document/02-gnb/#xn-interface","title":"Xn Interface","text":"<p>In the current implementation, the Xn interface is specifically designed for exchanging TEID information to support the NR-DC (New Radio Dual Connectivity) feature.</p> <p>Now, the Xn interface on each gNB listens on the address and port specified in the YAML configuration file, for example:</p> <pre><code>xnIp: \"10.0.1.2\"\nxnPort: 31415\n</code></pre> <p>This listener uses TCP, allowing any request to connect to it as needed. The processing function is defined in <code>gnb/xn.go</code> and can be extended in the <code>swtch</code> section.</p> <p>The supported <code>NGAP</code> types are:</p> <ol> <li> <p><code>ngapType.NGAPPDUPresentInitiatingMessage</code></p> <ol> <li><code>ngapType.ProcedureCodePDUSessionResourceSetup</code>: used for static NR-DC set up.</li> <li><code>ngapType.ProcedureCodePDUSessionResourceModifyIndicatio</code>n: used for dynamic NR-DC initial set up.</li> </ol> </li> <li> <p><code>ngapType.NGAPPDUPresentSuccessfulOutcome</code></p> <ol> <li><code>ngapType.ProcedureCodePDUSessionResourceModifyIndication</code>: used for dynamic NR-DC final setup.</li> </ol> </li> </ol>"},{"location":"doc-design-document/02-gnb/#ue-types","title":"UE types","text":"<ul> <li> <p>RanUe</p> <ul> <li> <p>Structure</p> <pre><code>type RanUe struct {\n    amfUeNgapId int64\n    ranUeNgapId int64\n\n    mobileIdentity5GS nasType.MobileIdentity5GS\n\n    ulTeid aper.OctetString\n    dlTeid aper.OctetString\n\n    n1Conn           net.Conn\n    dataPlaneAddress *net.UDPAddr\n\n    nrdcIndicator    bool\n    nrdcIndicatorMtx sync.Mutex\n}\n</code></pre> </li> <li> <p>Function</p> <p>RanUE is used to record all infomation about the UE controlled be gNB.</p> </li> </ul> </li> <li> <p>XnUE</p> <ul> <li> <p>Struct</p> <pre><code>type XnUe struct {\n    imsi string\n\n    ulTeid aper.OctetString\n    dlTeid aper.OctetString\n\n    dataPlaneAddress *net.UDPAddr\n}\n</code></pre> </li> <li> <p>Function</p> <p>XnUE is used to record the infomation about the UE offload from master gNB. XnUE will only handle data plane message for forwarding the packets between core network and UE.</p> </li> </ul> </li> </ul>"},{"location":"doc-design-document/02-gnb/#gtp-forwarding","title":"GTP Forwarding","text":"<p>The gNB implements GTP-U forwarding to handle user plane data between the UE and the core network. This includes:</p> <ul> <li>Encapsulation and decapsulation of user packets</li> <li>TEID-based routing</li> </ul> <p>For more detailed information about GTP-U implementation, please refer to: Userspace GTP-U</p>"},{"location":"doc-design-document/03-ue/","title":"UE","text":"<p>Note</p> <p>UE acts as a terminal device, like a mobile phone or an IoT device.</p>"},{"location":"doc-design-document/03-ue/#architecture-overview","title":"Architecture Overview","text":""},{"location":"doc-design-document/03-ue/#basic-connections","title":"Basic Connections","text":""},{"location":"doc-design-document/03-ue/#connections","title":"Connections","text":"<p>There will be two connections from UE to gNB:</p> <ul> <li>Control Plane: Used for signaling messages, authentication, and session management procedures.</li> <li>Data Plane: Used for user data transmission through established PDU sessions.</li> </ul>"},{"location":"doc-design-document/03-ue/#procedures","title":"Procedures","text":"<ol> <li>UE Registration: Initial registration procedure to attach UE to the 5G network.</li> <li>PDU Session Establishment: Procedure to establish data sessions for user plane communication.</li> </ol>"},{"location":"doc-design-document/03-ue/#gtp-u","title":"GTP-U","text":"<p>In <code>free-ran-ue</code>, UE will not engage in any GTP procedures. All GTP procedures are handled at the gNB.</p> <p>For more detailed information about GTP-U implementation, please refer to: Userspace GTP-U</p>"},{"location":"doc-design-document/04-static-nr-dc/","title":"Static NR-DC","text":"<p>Note</p> <p>Static NR-DC means the DC feature (two tunnels in one PDU Session) will be established during the PDU Session Establishment Procedure</p>"},{"location":"doc-design-document/04-static-nr-dc/#at-gnb","title":"At gNB","text":"<p>In the PDU Session Establishment procedure, after the gNB receives the <code>ngapPduSessionResourceSetupRequest</code> and confirms that NR-DC is enabled, the master gNB will forward this REQUEST to the secondary gNB via the Xn interface.</p> <p>The master gNB will extract the first UL TEID, and the secondary gNB will extract the second UL TEID from the REQUEST.</p> <ul> <li> <p>For master gNB:</p> <pre><code>for _, item := range pduSessionResourceSetupRequestTransfer.ProtocolIEs.List {\n    switch item.Id.Value {\n    case ngapType.ProtocolIEIDPDUSessionAggregateMaximumBitRate:\n    case ngapType.ProtocolIEIDULNGUUPTNLInformation:\n        ranUe.SetUlTeid(item.Value.ULNGUUPTNLInformation.GTPTunnel.GTPTEID.Value)\n    case ngapType.ProtocolIEIDAdditionalULNGUUPTNLInformation:\n    case ngapType.ProtocolIEIDPDUSessionType:\n    case ngapType.ProtocolIEIDQosFlowSetupRequestList:\n    }\n}\n</code></pre> </li> <li> <p>For secondary gNB:</p> <pre><code>for _, ie := range pduSessionResourceSetupRequestTransfer.ProtocolIEs.List {\n    switch ie.Id.Value {\n    case ngapType.ProtocolIEIDPDUSessionAggregateMaximumBitRate:\n    case ngapType.ProtocolIEIDULNGUUPTNLInformation:\n    case ngapType.ProtocolIEIDAdditionalULNGUUPTNLInformation:\n        xnUe.SetUlTeid(ie.Value.AdditionalULNGUUPTNLInformation.List[0].NGUUPTNLInformation.GTPTunnel.GTPTEID.Value)\n    case ngapType.ProtocolIEIDPDUSessionType:\n    case ngapType.ProtocolIEIDQosFlowSetupRequestList:\n    }\n}\n</code></pre> </li> </ul> <p>After the secondary gNB extracts the UL TEID from <code>AdditionalULNGUUPTNLInformation.List[0]</code>, it will format its DL TEID as a <code>ngapType.QosFlowPerTNLInformationItem</code> and send this item as a response back to the master gNB.</p> <pre><code>// DC QoS Flow per TNL Information\ndcQosFlowPerTNLInformationItem := ngapType.QosFlowPerTNLInformationItem{}\ndcQosFlowPerTNLInformationItem.QosFlowPerTNLInformation.UPTransportLayerInformation.Present = ngapType.UPTransportLayerInformationPresentGTPTunnel\n\n// DC Transport Layer Information in QoS Flow per TNL Information\ndcUpTransportLayerInformation := &amp;dcQosFlowPerTNLInformationItem.QosFlowPerTNLInformation.UPTransportLayerInformation\ndcUpTransportLayerInformation.Present = ngapType.UPTransportLayerInformationPresentGTPTunnel\ndcUpTransportLayerInformation.GTPTunnel = new(ngapType.GTPTunnel)\ndcUpTransportLayerInformation.GTPTunnel.GTPTEID.Value = xnUe.GetDlTeid()\ndcUpTransportLayerInformation.GTPTunnel.TransportLayerAddress = ngapConvert.IPAddressToNgap(g.ranN3Ip, \"\")\n\n// DC Associated QoS Flow List in QoS Flow per TNL Information\ndcAssociatedQosFlowList := &amp;dcQosFlowPerTNLInformationItem.QosFlowPerTNLInformation.AssociatedQosFlowList\ndcAssociatedQosFlowItem := ngapType.AssociatedQosFlowItem{}\ndcAssociatedQosFlowItem.QosFlowIdentifier.Value = 1\ndcAssociatedQosFlowList.List = append(dcAssociatedQosFlowList.List, dcAssociatedQosFlowItem)\n\ndcQosFlowPerTNLInformationMarshal, err := aper.MarshalWithParams(dcQosFlowPerTNLInformationItem, \"valueExt\")\n</code></pre> <p>When the master gNB receives the response, it will encapsulate the item into the <code>ngapPduSessionResourceSetupResponseTransfer</code> and send it back to the core network.</p> <p>For the core network's implementation, please refer to: NR-DC Design Document.</p>"},{"location":"doc-design-document/04-static-nr-dc/#at-ue","title":"At UE","text":"<p>If the UE is checked to be NR-DC enabled, the UE will establish a secondary connection to the secondary RAN after the PDU session establishment procedure.</p> <p>In the data plane, when reading raw packets from the TUN device, all packets will go through a destination IP filter. If the packet matches the QoS flow list, it will be sent to the secondary RAN; otherwise, it will be sent to the master RAN by default.</p> <pre><code>if util.IsIpInQosFlow(buffer, u.nrdc.qosFlow) {\n    n, err := u.dcRanDataPlaneConn.Write(buffer)\n} else {\n    n, err := u.ranDataPlaneConn.Write(buffer)\n}\n</code></pre> <p></p>"},{"location":"doc-design-document/05-dynamic-nr-dc/","title":"Dynamic NR-DC","text":"<p>Note</p> <p>Dynamic NR-DC means the DC feature (two tunnels in one PDU Session) will be trigger after the initial PDU session establishment procedure.</p>"},{"location":"doc-design-document/05-dynamic-nr-dc/#at-gnb","title":"At gNB","text":"<p>If gNB get the signal to modify the UE's tunnel, it will iinteract with secondary gNB for retrieving the second tunnel's info, like <code>TEID</code>.</p> <ul> <li> <p>For master gNB:</p> <ol> <li> <p>Build the target <code>PDUSessionResourceModifyIndicationTransfer</code> message.</p> <pre><code>pduSessionModifyIndicationTransfer, err := getPDUSessionResourceModifyIndicationTransfer(ranUe.GetDlTeid(), g.ranN3Ip, 1)\n</code></pre> </li> <li> <p>Encapsulate into <code>PDUSessionResourceModifyIndication</code> NGAP message.</p> <pre><code>pduSessionModifyIndication, err := getPDUSessionResourceModifyIndication(ranUe.GetAmfUeId(), ranUe.GetRanUeId(), constant.PDU_SESSION_ID, pduSessionModifyIndicationTransfer)\n</code></pre> </li> <li> <p>Interact with secondary gNB.</p> <pre><code>pduSessionModifyIndication, err = g.xnPduSessionResourceModifyIndication(ranUe.GetMobileIdentityIMSI(), pduSessionModifyIndication)\n</code></pre> <p>This step will start communication with secondary gNB via Xn-interface.</p> </li> <li> <p>Send the modify indication message to AMF for core network DC setup.</p> <pre><code>n, err := g.n2Conn.Write(pduSessionModifyIndication)\n</code></pre> </li> <li> <p>Receive the confirm message and transmit it to secondary gNB</p> <pre><code>_, err = g.xnPduSessionResourceModifyConfirm(ranUe.GetMobileIdentityIMSI(), ngapPduSessionResourceModifyConfirmRaw[:n])\n</code></pre> </li> <li> <p>Send tunnel update message to UE</p> <pre><code>modifyMessage := []byte(util.TUNNEL_UPDATE)\nn, err = ranUe.GetN1Conn().Write(modifyMessage)\n</code></pre> <p>This message is just designed by free-ran-ue, not followed 3GPP. The purpose of the message is letting UE update the data plane configuration.</p> </li> </ol> </li> <li> <p>For secondary gNB:</p> <ol> <li>Receive the modify indication NGAP message and insert its tunnel's information.</li> <li>Receive the confirm NGAP message and update the uplink TEID.</li> </ol> <p>For more details implemtation, please refer to: xn.go</p> </li> </ul>"},{"location":"doc-design-document/05-dynamic-nr-dc/#at-ue","title":"At UE","text":"<p>After master gNB finishing the modify procedure, it will send an update message to UE. Once UE received this tunnel update message, it will update the data plane configuration.</p> <ul> <li> <p>Modify from non-DC to DC:</p> <ol> <li> <p>Dial a connection to secondary gNB's data plane connection.</p> <pre><code>conn, err := util.TcpDialWithOptionalLocalAddress(u.nrdc.dcRanDataPlane.ip, u.nrdc.dcRanDataPlane.port, u.nrdc.dcLocalDataPlaneIp)\n</code></pre> </li> <li> <p>Start the data plane read for secondaru gNB.</p> <pre><code>buffer := make([]byte, 4096)\nfor {\n    n, err := u.dcRanDataPlaneConn.Read(buffer)\n    u.readFromRan &lt;- buffer[:n]\n}\n</code></pre> </li> </ol> </li> <li> <p>Modify from DC to non-DC</p> <ol> <li> <p>Close the secondary gNB's data plane connection.</p> <pre><code>u.dcRanDataPlaneConn.Close()\n</code></pre> </li> </ol> </li> </ul> <p>The data plane handler will based on the <code>ue.nrdc.enable</code> flag to do the traffic flow split.</p>"},{"location":"doc-user-guide/","title":"User Guide","text":"<p>Note</p> <ul> <li>It is recommended to set up two separate machines: one dedicated to free5GC and the other to free-ran-ue.</li> <li>Alternatively, free-ran-ue offers a single-machine solution with namespaces. For more information, please refer to the Quick Start section.</li> </ul>"},{"location":"doc-user-guide/#baisc-usage","title":"Baisc Usage","text":"<ul> <li>free5GC</li> <li>free-ran-ue</li> <li>Console</li> <li>Logger Level</li> </ul>"},{"location":"doc-user-guide/#advanced-feature","title":"Advanced Feature","text":"<ul> <li>Static NR-DC</li> <li>Dynamic NR-DC</li> </ul>"},{"location":"doc-user-guide/#quick-start","title":"Quick Start","text":"<ul> <li>free-ran-ue with Namespace</li> <li>Static NR-DC with Namespace</li> <li>Dynamic NR-DC with Namespace</li> </ul>"},{"location":"doc-user-guide/#docker","title":"Docker","text":"<ul> <li>Docker Deployment</li> <li>Docker ULCL Deployment</li> </ul>"},{"location":"doc-user-guide/01-free5gc/","title":"free5GC","text":"<p>Note</p> <p>For more free5GC's information, please refer to free5GC's official website</p>"},{"location":"doc-user-guide/01-free5gc/#a-build-and-install-free5gc","title":"A. Build and Install free5GC","text":"<p>Please refer to the official document: Install free5GC</p>"},{"location":"doc-user-guide/01-free5gc/#b-start-free5gc","title":"B. Start free5GC","text":"<ol> <li> <p>Setting Parameters</p> <ul> <li> <p>There will be three YAML file need modified:</p> <ul> <li>~/free5gc/config/amfcfg.yaml</li> <li>~/free5gc/config/smfcfg.yaml</li> <li>~/free5gc/config/upfcfg.yaml</li> </ul> </li> <li> <p>~/free5gc/config/amfcfg.yaml</p> <p>Replace <code>ngapIpList</code> IP from <code>127.0.0.18</code> to you export IP:</p> <pre><code>ngapIpList:\n  - &lt;your export IP&gt;\n</code></pre> </li> <li> <p>~/free5gc/config/smfcfg.yaml</p> <p>Replace N3 interface's endpoints IP from <code>127.0.0.8</code> to your export IP:</p> <pre><code>interfaces:\n  - interfaceType: N3\n    endpoints:\n      - &lt;your export IP&gt;\n</code></pre> </li> <li> <p>~/free5gc/config/upfcfg.yaml</p> <p>Replace N6 interface address IP from <code>127.0.0.8</code> to your export IP:</p> <pre><code>gtpu:\n  forwarder: gtp5g\n  iifList:\n    - addr: &lt;your export IP&gt;\n</code></pre> </li> </ul> </li> <li> <p>Check IP Forward is enabled</p> <p>If you have rebooted your machine, remember to run these command with setting your export network interface:</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;export network interface&gt; -j MASQUERADE\nsudo systemctl stop ufw\nsudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre> </li> <li> <p>Execute <code>run.sh</code> in free5GC</p> <pre><code>./run.sh\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/01-free5gc/#c-create-a-subscriber-in-free5gc","title":"C. Create A Subscriber in free5GC","text":"<p>Please refer to the official document: Create Subscriber via Webconsole</p>"},{"location":"doc-user-guide/02-free-ran-ue/","title":"free-ran-ue","text":"<p>Caution</p> <p>Do not start the UE on the same machine as free5GC, as this will cause data plane forwarding failures.</p> <p>There are two options for deployment:</p> <ul> <li>Use two separate machines.</li> <li>Use namespace separation. For details, please refer to Quick Start.</li> </ul>"},{"location":"doc-user-guide/02-free-ran-ue/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang:</p> <ul> <li>free-ran-ue is built, tested and run with <code>go1.24.5 linux/amd64</code></li> <li> <p>If Golang is not installed on your system, please execute the following commands:</p> <ul> <li> <p>Install Golang:</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>go version\n</code></pre> </li> </ul> </li> <li> <p>If another version of Golang is installed, please execute the following commands to replace it:</p> <pre><code>sudo rm -rf /usr/local/go\nwget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nsource $HOME/.bashrc\ngo version\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/02-free-ran-ue/#b-clone-and-build-free-ran-ue","title":"B. Clone and Build free-ran-ue","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build</p> <pre><code>cd free-ran-ue\nmake\n</code></pre> <p>After building, a binary executable file will be generated in the <code>build</code> folder.</p> </li> </ul>"},{"location":"doc-user-guide/02-free-ran-ue/#c-start-gnb","title":"C. Start gNB","text":"<ul> <li> <p>Modify the configuration file for gNB:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/gnb.yaml</code>.</p> <p>Ensure that the information matches your core network settings. For core network settings, please refer to: Start free5GC</p> </li> <li> <p>Start gNB:</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start gNB with the specified configuration file:</p> <pre><code>./build/free-ran-ue gnb -c config/gnb.yaml\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/02-free-ran-ue/#d-start-ue","title":"D. Start UE","text":"<ul> <li> <p>Modify the configuration file for UE:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/ue.yaml</code>.</p> <p>Ensure that the information matches your web console settings, especially the <code>authenticationSubscription</code> section. For web console settings, please refer to: Create Subscriber via Webconsole</p> <p>Pay attention to the <code>ueTunnelDevice</code> field, as this will be the name of the network interface created later.</p> </li> <li> <p>Start UE:</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start UE with the specified configuration file:</p> <pre><code>./build/free-ran-ue ue -c config/ue.yaml\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/02-free-ran-ue/#e-icmp-test","title":"E. ICMP Test","text":"<p>After UE has started, a network interface will be available. Use <code>ifconfig</code> to check it:</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p>ICMP test with <code>ueTun0</code>:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.1 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.99 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=3.90 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.84 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.07 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.62 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.618/3.881/4.067/0.152 ms\n</code></pre> <p>Now, both gNB and UE are running seccussfully.</p>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/","title":"free-ran-ue with Namespace","text":"<p>Note</p> <p>Namespace provides an alternative to using a physical machine.</p> <p>With namespaces, you can simulate isolated network environments on a single machine, making it possible to run both free5GC and free-ran-ue without the need for multiple physical devices.</p> <p>For detailed namespace implementation, please refer to this implementation article: Namespace-Based GTP5G Conflict Resolution for free5GC and PacketRusher.</p>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#architecture-overview","title":"Architecture Overview","text":"<p>Since the network port and routing table will get in conflict, we can set up three namespaces for free5GC/RAN/UE, which means you don't need to bring up real machines.</p> <p>Here is the deployment of these three namespaces:</p> <p></p>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>gtp5g</p> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\ngit clone https://github.com/free5gc/gtp5g\ncd gtp5g\nmake\nsudo make install\n</code></pre> </li> <li> <p>MongoDB</p> <pre><code>sudo apt install -y gnupg curl\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \\\nsudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\nsudo apt update\nsudo apt install -y mongodb-org\nsudo systemctl enable mongod --now\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#b-namespace-setup","title":"B. Namespace Setup","text":"<ol> <li> <p>Clone and build free-ran-ue</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\ncd free-ran-ue\nmake\n</code></pre> </li> <li> <p>Bring up namespaces (under <code>free-ran-ue</code>)</p> <pre><code>make ns-up\n</code></pre> <p>After using, there is <code>down</code> command to clean up the namespaces:</p> <pre><code>make ns-down\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#c-configure-free5gc","title":"C. Configure free5GC","text":"<ol> <li> <p>Clone free5GC and build</p> <pre><code>git clone -j `nproc` --recursive https://github.com/free5gc/free5gc\ncd free5gc\nmake\n</code></pre> </li> <li> <p>Modify NF configuration:</p> <ul> <li> <p>~/free5gc/config/amfcfg.yaml</p> <p>Replace <code>ngapIpList</code> IP from <code>127.0.0.18</code> to <code>10.0.1.1</code>:</p> <pre><code>ngapIpList:\n  - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/smfcfg.yaml</p> <p>Replace N3 interface's endpoints IP from <code>127.0.0.8</code> to your <code>10.0.1.1</code>:</p> <pre><code>interfaces:\n  - interfaceType: N3\n    endpoints:\n      - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/upfcfg.yaml</p> <p>Replace N6 interface address IP from <code>127.0.0.8</code> to <code>10.0.1.1</code>:</p> <pre><code>gtpu:\n  forwarder: gtp5g\n  iifList:\n    - addr: 10.0.1.1\n</code></pre> </li> </ul> </li> <li> <p>Check IP Forward is enabled</p> <p>If you have rebooted your machine, remember to run these command with setting your export network interface:</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;export network interface&gt; -j MASQUERADE\nsudo systemctl stop ufw\nsudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre> </li> <li> <p>Run free5GC (under <code>free5gc</code>)</p> <pre><code>./run.sh\n</code></pre> </li> <li> <p>Run webconsole and create a subscriber by default (under <code>free5gc</code>)</p> <pre><code>cd webconsole\n./run.sh\n</code></pre> <p>For creating a subscriber, please refer to: Create Subscriber via Webconsole</p> </li> </ol>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#d-start-gnb","title":"D. Start gNB","text":"<p>The configuration file <code>config/gnb.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ol> <li> <p>Enter the RAN-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make ns-ran\n</code></pre> </li> <li> <p>Start gNB</p> <pre><code>./build/free-ran-ue gnb -c config/gnb.yaml\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#e-start-ue","title":"E. Start UE","text":"<p>The configuration file <code>config/ue.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make ns-ue\n</code></pre> </li> <li> <p>Start UE</p> <pre><code>./build/free-ran-ue ue -c config/ue.yaml\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/03-quickstart-free-ran-ue/#f-icmp-test","title":"F. ICMP Test","text":"<ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make ns-ue\n</code></pre> </li> <li> <p>Check the <code>ueTun0</code> interface</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> </li> <li> <p><code>ping</code> test</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.1 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.99 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=3.90 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.84 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.07 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.62 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.618/3.881/4.067/0.152 ms\n</code></pre> </li> </ol> <p>Now, both gNB and UE are running successfully in the RAN-namespace and UE-namespace respectively.</p>"},{"location":"doc-user-guide/04-logger-level/","title":"Logger Level","text":"<p>For gNB, UE and console, there is a log level field in the configuration file:</p> <pre><code>logger:\n  level: \"info\" # error, warn, info, debug, trace, test\n</code></pre>"},{"location":"doc-user-guide/04-logger-level/#log-description","title":"Log Description","text":"<p>There are six log levels available for gNB, UE and console:</p> <ul> <li>error: Critical errors that cause the application to stop.</li> <li>warn: Unusual events that do not affect application functionality.</li> <li>info: General information that users should be aware of.</li> <li>debug: Information useful for developers during debugging.</li> <li>trace: Detailed step-by-step information for in-depth analysis.</li> <li>test: Logs for developer checking anywhere.</li> </ul> <p>This can be customized in the configuration files.</p>"},{"location":"doc-user-guide/05-static-nrdc/","title":"Static NR-DC","text":"<p>Caution</p> <ol> <li>Do not start the Master-gNB and Secondary-gNB on the same machine, as this will cause a GTP port conflict.</li> <li>Do not start the UE on the same machine as free5GC, as this will cause data plane forwarding failures.</li> </ol> <p>There are two options for deployment:</p> <ul> <li>Use separate machines.</li> <li>Use namespace separation. For details, please refer to Quick Start.</li> </ul>"},{"location":"doc-user-guide/05-static-nrdc/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang:</p> <ul> <li>free-ran-ue is built, tested and run with <code>go1.24.5 linux/amd64</code></li> <li> <p>If Golang is not installed on your system, please execute the following commands:</p> <ul> <li> <p>Install Golang:</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>go version\n</code></pre> </li> </ul> </li> <li> <p>If another version of Golang is installed, please execute the following commands to replace it:</p> <pre><code>sudo rm -rf /usr/local/go\nwget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nsource $HOME/.bashrc\ngo version\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/05-static-nrdc/#b-clone-and-build-free-ran-ue","title":"B. Clone and Build free-ran-ue","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build</p> <pre><code>cd free-ran-ue\nmake\n</code></pre> <p>After building, a binary executable file will be generated in the <code>build</code> folder.</p> </li> </ul>"},{"location":"doc-user-guide/05-static-nrdc/#c-start-gnbs","title":"C. Start gNBs","text":"<ul> <li> <p>Modify the configuration file for gNBs:</p> <p>The configuration <code>YAML</code> file template is located at:</p> <ul> <li><code>free-ran-ue/config/gnb-dc-static-master.yaml</code></li> <li><code>free-ran-ue/config/gnb-dc-static-secondary.yaml</code></li> </ul> <p>Ensure that the information matches your core network settings. For core network settings, please refer to: Start free5GC</p> <p>Please also pay attention to the <code>xnIp</code> and <code>xnPort</code> field, as these will be used for the Xn-interface between the gNBs.</p> <p>Also noticed the fields <code>staticNrdc</code> that should be set as <code>true</code> for enabling static NR-DC.</p> </li> <li> <p>Start gNB:</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start gNBs with the specified configuration file:</p> <ul> <li> <p>Master-gNB:</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-static-master.yaml\n</code></pre> </li> <li> <p>Secondary-gNB:</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-static-secondary.yaml\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/05-static-nrdc/#d-start-ue","title":"D. Start UE","text":"<ul> <li> <p>Modify the configuration file for UE:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/ue-dc-static.yaml</code>.</p> <p>Ensure that the information matches your web console settings, especially the <code>authenticationSubscription</code> section. For web console settings, please refer to: Create Subscriber via Webconsole</p> <p>To test the dual connectivity feature, there should be at least one flow rule (e.g. <code>1.1.1.1/32</code>) configured under the subscriber.</p> <p>Pay attention to the <code>ueTunnelDevice</code> field, as this will be the name of the network interface created later. Also make sure the <code>nrdc</code> section is configure correctly.</p> </li> <li> <p>Start UE:</p> <p>After configuring the <code>YAML</code> file,execute the binary in the <code>build</code> folder to start UE with the specified configuration file:</p> <pre><code>./build/free-ran-ue ue -c config/ue-dc-static.yaml\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/05-static-nrdc/#e-icmp-test","title":"E. ICMP Test","text":"<p>After UE has started, a network interface will be available. Use <code>ifconfig</code> to check it:</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Master-gNB:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.71 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.08 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.82 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.25 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.77 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.706/3.926/4.252/0.206 ms\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Secondary-gNB:</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.51 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.46 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.27 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=3.97 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.64 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.972/4.371/4.644/0.232 ms\n</code></pre>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/","title":"Static NR-DC with Namespace","text":"<p>Note</p> <p>Namespace provides an alternative to using a physical machine.</p> <p>With namespaces, you can simulate isolated network environments on a single machine, making it possible to run both free5GC and free-ran-ue without the need for multiple physical devices.</p> <p>For detailed namespace implementation, please refer to this implementation article: Namespace-Based GTP5G Conflict Resolution for free5GC and PacketRusher.</p>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#architecture-overview","title":"Architecture Overview","text":"<p>Since the GTP port and the routing table will get in conflict, we can set up four namespaces for free5GC/Master RAN/Secondary RAN/UE, which means you don't need to bring up real machines.</p> <p>Here is the deployment of these three namespaces:</p> <p></p>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>gtp5g</p> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\ngit clone https://github.com/free5gc/gtp5g\ncd gtp5g\nmake\nsudo make install\n</code></pre> </li> <li> <p>MongoDB</p> <pre><code>sudo apt install -y gnupg curl\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \\\nsudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\nsudo apt update\nsudo apt install -y mongodb-org\nsudo systemctl enable mongod --now\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#b-namespace-setup","title":"B. Namespace Setup","text":"<ol> <li> <p>Clone and build free-ran-ue</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\ncd free-ran-ue\nmake\n</code></pre> </li> <li> <p>Bring up namespaces (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-u\n</code></pre> <p>After using, there is <code>down</code> command to clean up the namespaces:</p> <pre><code>make dc-ns-down\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#c-configure-free5gc","title":"C. Configure free5GC","text":"<ol> <li> <p>Clone free5GC and build</p> <pre><code>git clone -j `nproc` --recursive https://github.com/free5gc/free5gc\ncd free5gc\nmake\n</code></pre> </li> <li> <p>Modify NF configuration:</p> <ul> <li> <p>~/free5gc/config/amfcfg.yaml</p> <p>Replace <code>ngapIpList</code> IP from <code>127.0.0.18</code> to <code>10.0.1.1</code>:</p> <pre><code>ngapIpList:\n  - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/smfcfg.yaml</p> <p>Replace N3 interface's endpoints IP from <code>127.0.0.8</code> to your <code>10.0.1.1</code>:</p> <pre><code>interfaces:\n  - interfaceType: N3\n    endpoints:\n      - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/upfcfg.yaml</p> <p>Replace N6 interface address IP from <code>127.0.0.8</code> to <code>10.0.1.1</code>:</p> <pre><code>gtpu:\n  forwarder: gtp5g\n  iifList:\n    - addr: 10.0.1.1\n</code></pre> </li> </ul> </li> <li> <p>Check IP Forward is enabled</p> <p>If you have rebooted your machine, remember to run these command with setting your export network interface:</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;export network interface&gt; -j MASQUERADE\nsudo systemctl stop ufw\nsudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre> </li> <li> <p>Run free5GC (under <code>free5gc</code>)</p> <pre><code>./run.sh\n</code></pre> </li> <li> <p>Run webconsole and create a subscriber by default (under <code>free5gc</code>)</p> <pre><code>cd webconsole\n./run.sh\n</code></pre> <p>For creating a subscriber, please refer to: Create Subscriber via Webconsole</p> <p>Make sure there is a flow rule (e.g. <code>1.1.1.1/32</code>) under the network slice.</p> </li> </ol>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#d-start-gnbs","title":"D. Start gNBs","text":"<p>The configuration file <code>config/gnb.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ul> <li> <p>Master-gNB</p> <ol> <li> <p>Enter the Master-RAN namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-mran\n</code></pre> </li> <li> <p>Start Master-gNB</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-static-master.yaml\n</code></pre> </li> </ol> </li> <li> <p>Secondary-gNB</p> <ol> <li> <p>Enter the Master-RAN namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-sran\n</code></pre> </li> <li> <p>Start Master-gNB</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-static-secondary.yaml\n</code></pre> </li> </ol> </li> </ul>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#e-start-ue","title":"E. Start UE","text":"<p>The configuration file <code>config/ue-dc-static.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-ue\n</code></pre> </li> <li> <p>Start UE</p> <pre><code>./build/free-ran-ue ue -c config/ue-dc-static.yaml\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/06-quickstart-static-nrdc/#f-icmp-test","title":"F. ICMP Test","text":"<ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-ue\n</code></pre> </li> <li> <p>Check the <code>ueTun0</code> interface</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> </li> <li> <p><code>ping</code> test via Master-gMB</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.71 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.08 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.82 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.25 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.77 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.706/3.926/4.252/0.206 ms\n</code></pre> </li> <li> <p><code>ping</code> test via Secondary-gNB</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.51 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.46 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.27 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=3.97 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.64 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.972/4.371/4.644/0.232 ms\n</code></pre> </li> </ol> <p>Now, both the Master-gNB and Secondary-gNB are running successfully in their respective namespaces. The UE also works well with dual path connections.</p>"},{"location":"doc-user-guide/07-console/","title":"Console","text":"<p>Note</p> <p>This is free-ran-ue management tool. The console will used to check the gNB and UE status and manually control UE's DC status.</p>"},{"location":"doc-user-guide/07-console/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang:</p> <ul> <li>free-ran-ue is built, tested and run with <code>go1.24.5 linux/amd64</code></li> <li> <p>If Golang is not installed on your system, please execute the following commands:</p> <ul> <li> <p>Install Golang:</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>go version\n</code></pre> </li> </ul> </li> <li> <p>If another version of Golang is installed, please execute the following commands to replace it:</p> <pre><code>sudo rm -rf /usr/local/go\nwget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nsource $HOME/.bashrc\ngo version\n</code></pre> </li> </ul> </li> <li> <p>Node.js</p> <ul> <li>free-ran-ue's console is built, test and run with <code>node v20.19.2</code> / <code>yarn v1.22.22</code>.</li> <li> <p>If node and yarn is not installed on your system, olease execute the following commands:</p> <ul> <li> <p>Install node and yarn:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - \nsudo apt update\nsudo apt install -y nodejs\nsudo corepack enable\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>node -v\nyarn -v\n</code></pre> </li> </ul> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/07-console/#b-clone-and-build-free-ran-ue","title":"B. Clone and Build free-ran-ue","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build</p> <pre><code>cd free-ran-ue\nmake all\n</code></pre> <p>After building, a binary executable file and frontend static files will be generated in the <code>build</code> folder.</p> </li> </ul>"},{"location":"doc-user-guide/07-console/#c-start-console","title":"C. Start Console","text":"<ul> <li> <p>Modify the configuration file for console:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/console.yaml</code>.</p> <p>The port field will be used for accessing the console page.</p> <p>Make sure the gNB's configuration YAML has the <code>api</code> section for console access, like:</p> <pre><code>api:\n  ip: \"10.0.1.2\"\n  port: 40104\n</code></pre> </li> <li> <p>Start Console</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start console with the specified configuration file:</p> <pre><code>./build/free-ran-ue console -c config/console.yaml\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/07-console/#d-access-console","title":"D. Access Console","text":"<p>Start your browser, and access your host's ip with the port configure in the <code>YAML</code> file.</p> <p>You will see the page like this:</p> <p></p> <p>Enter username and password:</p> <ul> <li>username: <code>admin</code></li> <li>password: <code>free-ran-ue</code></li> </ul> <p>Then you will see the dashboard:</p> <p></p>"},{"location":"doc-user-guide/07-console/#e-add-gnb","title":"E. Add gNB","text":"<p>Enter the gNB page:</p> <p></p> <p>Click the <code>Add gNB</code> button and enter the target gNB's API IP and port based the configuration file:</p> <p></p> <p>Add success:</p> <p></p>"},{"location":"doc-user-guide/07-console/#f-ue","title":"F. UE","text":"<p>At UE page, you can see the UE which is connected to gNB or be XnUE at secondary gNB.</p> <ul> <li> <p>RAN UE List means there is basic UE connection via gNB:</p> <p></p> </li> <li> <p>Xn UE List means there is DC UE connection at gNB:</p> <p></p> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/","title":"Dynamic NR-DC","text":"<p>Caution</p> <ol> <li>Do not start the Master-gNB and Secondary-gNB on the same machine, as this will cause a GTP port conflict.</li> <li>Do not start the UE on the same machine as free5GC, as this will cause data plane forwarding failures.</li> </ol> <p>There are two options for deployment:</p> <ul> <li>Use separate machines.</li> <li>Use namespace separation. For details, please refer to Quick Start.</li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang:</p> <ul> <li>free-ran-ue is built, tested and run with <code>go1.24.5 linux/amd64</code></li> <li> <p>If Golang is not installed on your system, please execute the following commands:</p> <ul> <li> <p>Install Golang:</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>go version\n</code></pre> </li> </ul> </li> <li> <p>If another version of Golang is installed, please execute the following commands to replace it:</p> <pre><code>sudo rm -rf /usr/local/go\nwget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nsource $HOME/.bashrc\ngo version\n</code></pre> </li> </ul> </li> <li> <p>Node.js</p> <ul> <li>free-ran-ue's console is built, test and run with <code>node v20.19.2</code> / <code>yarn v1.22.22</code>.</li> <li> <p>If node and yarn is not installed on your system, olease execute the following commands:</p> <ul> <li> <p>Install node and yarn:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - \nsudo apt update\nsudo apt install -y nodejs\nsudo corepack enable\n</code></pre> </li> <li> <p>Check Installation. You should see the version information:</p> <pre><code>node -v\nyarn -v\n</code></pre> </li> </ul> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#b-clone-and-build-free-ran-ue","title":"B. Clone and Build free-ran-ue","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build</p> <pre><code>cd free-ran-ue\nmake all\n</code></pre> <p>After building, a binary executable file and frontend static files will be generated in the <code>build</code> folder.</p> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#c-start-gnbs","title":"C. Start gNBs","text":"<ul> <li> <p>Modify the configuration file for gNBs:</p> <p>The configuration <code>YAML</code> file template is located at:</p> <ul> <li><code>free-ran-ue/config/gnb-dc-dynamic-master.yaml</code></li> <li><code>free-ran-ue/config/gnb-dc-dynamic-secondary.yaml</code></li> </ul> <p>Ensure that the information matches your core network settings. For core network settings, please refer to: Start free5GC</p> <p>Please also pay attention to the <code>xnIp</code> and <code>xnPort</code> field, as these will be used for the Xn-interface between the gNBs.</p> <p>Also noticed the fields <code>staticNrdc</code> that should be set as <code>false</code> for disabling static NR-DC.</p> </li> <li> <p>Start gNB:</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start gNBs with the specified configuration file:</p> <ul> <li> <p>Master-gNB:</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-dynamic-master.yaml\n</code></pre> </li> <li> <p>Secondary-gNB:</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-dynamic-secondary.yaml\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#d-start-ue","title":"D. Start UE","text":"<ul> <li> <p>Modify the configuration file for UE:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/ue-dc-dynamic.yaml</code>.</p> <p>Ensure that the information matches your web console settings, especially the <code>authenticationSubscription</code> section. For web console settings, please refer to: Create Subscriber via Webconsole</p> <p>To test the dual connectivity feature, there should be at least one flow rule (e.g. <code>1.1.1.1/32</code>) configured under the subscriber.</p> <p>Pay attention to the <code>ueTunnelDevice</code> field, as this will be the name of the network interface created later. Also make sure the <code>nrdc</code> section is configure correctly. In dynamic case, the nrdc should be set as <code>false</code> in the beginning.</p> </li> <li> <p>Start UE:</p> <p>After configuring the <code>YAML</code> file,execute the binary in the <code>build</code> folder to start UE with the specified configuration file:</p> <pre><code>./build/free-ran-ue ue -c config/ue-dc-dynamic.yaml\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#e-start-console","title":"E. Start Console","text":"<ul> <li> <p>Modify the configuration file for console:</p> <p>The configuration <code>YAML</code> file template is located at <code>free-ran-ue/config/console.yaml</code>.</p> <p>The port field will be used for accessing the console page.</p> <p>Make sure the gNB's configuration YAML has the <code>api</code> section for console access, like:</p> <pre><code>api:\n  ip: \"10.0.1.2\"\n  port: 40104\n</code></pre> </li> <li> <p>Start Console</p> <p>After configuring the <code>YAML</code> file, execute the binary in the <code>build</code> folder to start console with the specified configuration file:</p> <pre><code>./build/free-ran-ue console -c config/console.yaml\n</code></pre> <ul> <li> <p>Sign in console:</p> <ul> <li>username: <code>admin</code></li> <li>password: <code>free-ran-ue</code></li> </ul> <p></p> </li> <li> <p>Add gNB:</p> <p>Enter the gNB page:</p> <p></p> <p>Click the <code>Add gNB</code> button and enter the target gNB's API IP and port based the configuration file:</p> <p></p> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/08-dynamic-nrdc/#f-icmp-test","title":"F. ICMP Test","text":"<p>After UE has started, a network interface will be available. Use <code>ifconfig</code> to check it:</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <ul> <li> <p>Before DC enabled:</p> <p>ICMP test with <code>ueTun0</code> via Master-gNB:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.71 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.08 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.82 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.25 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.77 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.706/3.926/4.252/0.206 ms\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Secondary-gNB:</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.51 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.46 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.27 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=3.97 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.64 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.972/4.371/4.644/0.232 ms\n</code></pre> </li> <li> <p>Use console to start DC:</p> <ol> <li> <p>Enter master gNB's information page:</p> <p></p> </li> <li> <p>Turn on the DC of UE:</p> <p></p> </li> <li> <p>Check XnUe is exist in secondary gNB:</p> <p></p> </li> </ol> </li> <li> <p>After DC enabled:</p> <p>ICMP test with <code>ueTun0</code> via Master-gNB:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=4.12 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.11 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.99 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=3.68 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.63 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.627/3.905/4.120/0.212 ms\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Secondary-gNB:</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.80 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.43 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.42 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=4.21 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.78 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 4.210/4.527/4.797/0.225 ms\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/","title":"Dynamic NR-DC with Namespace","text":"<p>Note</p> <p>Namespace provides an alternative to using a physical machine.</p> <p>With namespaces, you can simulate isolated network environments on a single machine, making it possible to run both free5GC and free-ran-ue without the need for multiple physical devices.</p> <p>For detailed namespace implementation, please refer to this implementation article: Namespace-Based GTP5G Conflict Resolution for free5GC and PacketRusher.</p>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#architecture-overview","title":"Architecture Overview","text":"<p>Since the GTP port and the routing table will get in conflict, we can set up four namespaces for free5GC/Master RAN/Secondary RAN/UE, which means you don't need to bring up real machines.</p> <p>Here is the deployment of these three namespaces:</p> <p></p>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Golang / Node.js / Yarn</p> <pre><code>wget https://dl.google.com/go/go1.24.5.linux-amd64.tar.gz\nsudo tar -C /usr/local -zxvf go1.24.5.linux-amd64.tar.gz\nmkdir -p ~/go/{bin,pkg,src}\n# The following assume that your shell is bash:\necho 'export GOPATH=$HOME/go' &gt;&gt; ~/.bashrc\necho 'export GOROOT=/usr/local/go' &gt;&gt; ~/.bashrc\necho 'export PATH=$PATH:$GOPATH/bin:$GOROOT/bin' &gt;&gt; ~/.bashrc\necho 'export GO111MODULE=auto' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - \nsudo apt update\nsudo apt install -y nodejs\nsudo corepack enable\n</code></pre> </li> <li> <p>gtp5g</p> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\ngit clone https://github.com/free5gc/gtp5g\ncd gtp5g\nmake\nsudo make install\n</code></pre> </li> <li> <p>MongoDB</p> <pre><code>sudo apt install -y gnupg curl\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \\\nsudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\nsudo apt update\nsudo apt install -y mongodb-org\nsudo systemctl enable mongod --now\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#b-namespace-setup","title":"B. Namespace Setup","text":"<ol> <li> <p>Clone and build free-ran-ue</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\ncd free-ran-ue\nmake all\n</code></pre> </li> <li> <p>Bring up namespaces (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-u\n</code></pre> <p>After using, there is <code>down</code> command to clean up the namespaces:</p> <pre><code>make dc-ns-down\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#c-configure-free5gc","title":"C. Configure free5GC","text":"<ol> <li> <p>Clone free5GC and build</p> <pre><code>git clone -j `nproc` --recursive https://github.com/free5gc/free5gc\ncd free5gc\nmake\n</code></pre> </li> <li> <p>Modify NF configuration:</p> <ul> <li> <p>~/free5gc/config/amfcfg.yaml</p> <p>Replace <code>ngapIpList</code> IP from <code>127.0.0.18</code> to <code>10.0.1.1</code>:</p> <pre><code>ngapIpList:\n  - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/smfcfg.yaml</p> <p>Replace N3 interface's endpoints IP from <code>127.0.0.8</code> to your <code>10.0.1.1</code>:</p> <pre><code>interfaces:\n  - interfaceType: N3\n    endpoints:\n      - 10.0.1.1\n</code></pre> </li> <li> <p>~/free5gc/config/upfcfg.yaml</p> <p>Replace N6 interface address IP from <code>127.0.0.8</code> to <code>10.0.1.1</code>:</p> <pre><code>gtpu:\n  forwarder: gtp5g\n  iifList:\n    - addr: 10.0.1.1\n</code></pre> </li> </ul> </li> <li> <p>Check IP Forward is enabled</p> <p>If you have rebooted your machine, remember to run these command with setting your export network interface:</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo iptables -t nat -A POSTROUTING -o &lt;export network interface&gt; -j MASQUERADE\nsudo systemctl stop ufw\nsudo iptables -I FORWARD 1 -j ACCEPT\n</code></pre> </li> <li> <p>Run free5GC (under <code>free5gc</code>)</p> <pre><code>./run.sh\n</code></pre> </li> <li> <p>Run webconsole and create a subscriber by default (under <code>free5gc</code>)</p> <pre><code>cd webconsole\n./run.sh\n</code></pre> <p>For creating a subscriber, please refer to: Create Subscriber via Webconsole</p> <p>Make sure there is a flow rule (e.g. <code>1.1.1.1/32</code>) under the network slice.</p> </li> </ol>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#d-start-gnbs","title":"D. Start gNBs","text":"<p>The configuration file <code>config/gnb.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ul> <li> <p>Master-gNB</p> <ol> <li> <p>Enter the Master-RAN namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-mran\n</code></pre> </li> <li> <p>Start Master-gNB</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-dynamic-master.yaml\n</code></pre> </li> </ol> </li> <li> <p>Secondary-gNB</p> <ol> <li> <p>Enter the Master-RAN namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-sran\n</code></pre> </li> <li> <p>Start Master-gNB</p> <pre><code>./build/free-ran-ue gnb -c config/gnb-dc-dynamic-secondary.yaml\n</code></pre> </li> </ol> </li> </ul>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#e-start-ue","title":"E. Start UE","text":"<p>The configuration file <code>config/ue-dc-dynamic.yaml</code> has already been set up with the environment values. No need to modify the configuration.</p> <ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-ue\n</code></pre> </li> <li> <p>Start UE</p> <pre><code>./build/free-ran-ue ue -c config/ue-dc-dynamic.yaml\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#f-start-console","title":"F. Start Console","text":"<ol> <li>Run in the host namespace</li> <li> <p>Start Console</p> <pre><code>./build/free-ran-ue console -c config/console.yaml\n</code></pre> </li> <li> <p>Add gNB</p> <ul> <li> <p>Sign in the console:</p> <ul> <li>username: <code>admin</code></li> <li>password: <code>free-ran-ue</code></li> </ul> <p></p> </li> <li> <p>Add gNB-master and gNB-secondary:</p> <ul> <li> <p>gNB-master</p> <ul> <li>IP Address: <code>10.0.1.2</code></li> <li>Port: <code>40104</code></li> </ul> </li> <li> <p>gNB-secondary</p> <ul> <li>IP Address: <code>10.0.1.3</code></li> <li>Port: <code>40104</code></li> </ul> </li> </ul> <p></p> </li> <li> <p>Check add success:</p> <p></p> </li> </ul> </li> </ol>"},{"location":"doc-user-guide/09-quickstart-dynamic-nrdc/#g-icmp-test","title":"G. ICMP Test","text":"<ol> <li> <p>Enter the UE-namespace (under <code>free-ran-ue</code>)</p> <pre><code>make dc-ns-ue\n</code></pre> </li> <li> <p>Check the <code>ueTun0</code> interface</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n        inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n        inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 3  bytes 144 (144.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> </li> <li> <p>Before DC enabled:</p> <p>ICMP test with <code>ueTun0</code> via Master-gNB:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=3.71 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.08 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.82 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=4.25 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.77 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 3.706/3.926/4.252/0.206 ms\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Secondary-gNB:</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.51 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.46 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.27 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=3.97 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.64 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.972/4.371/4.644/0.232 ms\n</code></pre> </li> <li> <p>Use console to start DC:</p> <ol> <li> <p>Enter gNB-master's information page:</p> <p></p> </li> <li> <p>Turn on the DC of UE:</p> <p></p> </li> <li> <p>Check XnUE exist in gNB-secondary:</p> <p></p> </li> </ol> </li> <li> <p>After DC enabled:</p> <p>ICMP test with <code>ueTun0</code> via Master-gNB:</p> <pre><code>ping -I ueTun0 8.8.8.8 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 8.8.8.8 (8.8.8.8) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=4.12 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=116 time=4.11 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=116 time=3.99 ms\n64 bytes from 8.8.8.8: icmp_seq=4 ttl=116 time=3.68 ms\n64 bytes from 8.8.8.8: icmp_seq=5 ttl=116 time=3.63 ms\n\n--- 8.8.8.8 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4007ms\nrtt min/avg/max/mdev = 3.627/3.905/4.120/0.212 ms\n</code></pre> <p>ICMP test with <code>ueTun0</code> via Secondary-gNB:</p> <pre><code>ping -I ueTun0 1.1.1.1 -c 5\n</code></pre> <p>Expected successful output:</p> <pre><code>PING 1.1.1.1 (1.1.1.1) from 10.60.0.2 ueTun0: 56(84) bytes of data.\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=49 time=4.80 ms\n64 bytes from 1.1.1.1: icmp_seq=2 ttl=49 time=4.43 ms\n64 bytes from 1.1.1.1: icmp_seq=3 ttl=49 time=4.42 ms\n64 bytes from 1.1.1.1: icmp_seq=4 ttl=49 time=4.21 ms\n64 bytes from 1.1.1.1: icmp_seq=5 ttl=49 time=4.78 ms\n\n--- 1.1.1.1 ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 4006ms\nrtt min/avg/max/mdev = 4.210/4.527/4.797/0.225 ms\n</code></pre> </li> </ol>"},{"location":"doc-user-guide/10-docker/","title":"Docker Deployment","text":"<p>Note</p> <p>Docker offers an alternative way to deploy free5GC with free-ran-ue on a single machine without any network setting conflicts.</p> <p>For free5GC NF images, compose will pull the latest version from free5GC's Docker Hub.</p>"},{"location":"doc-user-guide/10-docker/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Docker:</p> <ul> <li> <p>Install</p> <pre><code>sudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo apt update\nsudo apt install docker-ce\nsudo systemctl start docker\nsudo docker --version\n</code></pre> </li> <li> <p>Docker group (avoid sudo problem)</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre> </li> </ul> </li> <li> <p>gtp5g</p> <ul> <li> <p>Packages</p> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\n</code></pre> </li> <li> <p>Clone, Build and Install</p> <pre><code>git clone https://github.com/free5gc/gtp5g\ncd gtp5g\nmake\nsudo make install\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/10-docker/#b-build-free-ran-ue-image","title":"B. Build free-ran-ue Image","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build Image</p> <pre><code>cd free-ran-ue\nmake docker\n</code></pre> <p>After building, use <code>docker images</code> cli to check image.</p> </li> </ul>"},{"location":"doc-user-guide/10-docker/#c-start-compose","title":"C. Start Compose","text":"<p>There are three types of docker compose:</p> <ul> <li> <p>Basic free-ran-ue</p> <pre><code>docker compose -f docker/docker-compose.yaml up\n</code></pre> </li> <li> <p>Static NR-DC</p> <pre><code>docker compose -f docker/docker-compose-dc-static.yaml up\n</code></pre> </li> <li> <p>Dynamic NR-DC</p> <pre><code>docker compose -f docker/docker-compose-dc-dynamic.yaml up\n</code></pre> </li> </ul>"},{"location":"doc-user-guide/10-docker/#d-only-dynamic-nr-dc-console","title":"D. (Only Dynamic NR-DC) Console","text":"<p>Start your browser, and access your host's with the port configure in the <code>docker/config/fru-consolecfg.yaml</code>. (defaule is <code>40104</code>)</p> <p>The gNBs default configuration are:</p> <ul> <li> <p>gNB-master:</p> <ul> <li>IP Address: <code>10.0.4.3</code></li> <li>Port: <code>40104</code></li> </ul> </li> <li> <p>gNB-secondary:</p> <ul> <li>IP Address: <code>10.0.4.5</code></li> <li>Port: <code>40104</code></li> </ul> </li> </ul> <p>For console usage, please refer to: console</p>"},{"location":"doc-user-guide/10-docker/#e-ue","title":"E. UE","text":"<p>After docker compose started, UE can be started by entering the <code>ue</code> container.</p> <ol> <li> <p>Enter <code>ue</code> container</p> <pre><code>docker exec -it ue bash\n</code></pre> </li> <li> <p>Start UE</p> <pre><code>./free-ran-ue ue -c uecfg.yaml\n</code></pre> </li> <li> <p>Check Network Interface</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n    inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n    inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n    unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n    RX packets 0  bytes 0 (0.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 0  bytes 0 (0.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> </li> <li> <p>Application</p> <p>Now, the whole deployment is finished. Network interface <code>ueTun0</code> can be used for any application, e.g. ICMP / iperf.</p> </li> </ol>"},{"location":"doc-user-guide/11-docker-ulcl/","title":"Docker ULCL Deployment","text":"<p>Note</p> <p>ULCL provides an Uplink Classifier for splitting the traffic of specific DN.</p>"},{"location":"doc-user-guide/11-docker-ulcl/#architecture-overview","title":"Architecture Overview","text":"<p>In ULCL, we define a specific traffic route for the destination <code>1.1.1.1/32</code>. All traffic destined for <code>1.1.1.1/32</code> will be routed through the path <code>gNB - I-UPF - DN</code>. Other traffic will be routed through <code>gNB - I-UPF - PSA-UPF - DN</code>.</p> <p>Here is the deployment of ULCL version:</p> <p></p>"},{"location":"doc-user-guide/11-docker-ulcl/#a-prerequisites","title":"A. Prerequisites","text":"<ul> <li> <p>Docker:</p> <ul> <li> <p>Install</p> <pre><code>sudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo apt update\nsudo apt install docker-ce\nsudo systemctl start docker\nsudo docker --version\n</code></pre> </li> <li> <p>Docker group (avoid sudo problem)</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre> </li> </ul> </li> <li> <p>gtp5g</p> <ul> <li> <p>Packages</p> <pre><code>sudo apt -y update\nsudo apt -y install git gcc g++ cmake autoconf libtool pkg-config libmnl-dev libyaml-dev\n</code></pre> </li> <li> <p>Clone, Build and Install</p> <pre><code>git clone https://github.com/free5gc/gtp5g\ncd gtp5g\nmake\nsudo make install\n</code></pre> </li> </ul> </li> </ul>"},{"location":"doc-user-guide/11-docker-ulcl/#b-build-free-ran-ue-image","title":"B. Build free-ran-ue Image","text":"<ul> <li> <p>Clone</p> <pre><code>git clone https://github.com/Alonza0314/free-ran-ue.git\n</code></pre> </li> <li> <p>Build Image</p> <pre><code>cd free-ran-ue\nmake docker\n</code></pre> <p>After building, use <code>docker images</code> cli to check image.</p> </li> </ul>"},{"location":"doc-user-guide/11-docker-ulcl/#c-start-ulcl-compose","title":"C. Start ULCL Compose","text":"<pre><code>docker compose -f docker/docker-compose-ulcl.yaml up\n</code></pre> <p>For the specific ue routes, please configure at <code>free-ran-ue/docker/config/ULCL/uerouting.yaml</code>.</p> <p>In default, there is a specific path for destination <code>1.1.1.1/32</code>.</p>"},{"location":"doc-user-guide/11-docker-ulcl/#d-ue","title":"D. UE","text":"<p>After docker compose started, UE can be started by entering the <code>ue</code> container.</p> <ol> <li> <p>Enter <code>ue</code> container</p> <pre><code>docker exec -it ue bash\n</code></pre> </li> <li> <p>Start UE</p> <pre><code>./free-ran-ue ue -c uecfg.yaml\n</code></pre> </li> <li> <p>Check Network Interface</p> <pre><code>ifconfig\n</code></pre> <p>Expected output included:</p> <pre><code>ueTun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500\n    inet 10.60.0.1  netmask 255.255.255.255  destination 10.60.0.1\n    inet6 fe80::b1e9:2933:3c64:b981  prefixlen 64  scopeid 0x20&lt;link&gt;\n    unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n    RX packets 0  bytes 0 (0.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 0  bytes 0 (0.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> </li> <li> <p>Application</p> <p>Now, the whole deployment is finished. Network interface <code>ueTun0</code> can be used for any application, e.g. ICMP / iperf.</p> </li> </ol>"}]}